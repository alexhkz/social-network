{"version":3,"sources":["components/Dialogs/Dialogs.module.css","Hoc/withAuthRedirect.jsx","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","DialogItem","props","path","id","className","classes","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","validate","requiredField","placeholder","Dialogs","dialogsPage","dialogsElements","dialogs","map","messagesElements","messages","newMessageBody","dialogsItems","values","sendMessage","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"2GACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,iICG9KC,EAA6B,SAACC,GAAD,MAAY,CAC5CC,OAAQD,EAAME,KAAKD,S,mCCQLE,EATI,SAACC,GACnB,IAAIC,EAAO,YAAcD,EAAME,GAC/B,OACC,qBAAKC,UAAWC,IAAQC,OAAS,IAAMD,IAAQE,OAA/C,SACC,cAAC,IAAD,CAASC,GAAIN,EAAb,SAAoBD,EAAMQ,UCCdC,EANC,SAACT,GAChB,OACC,qBAAKG,UAAWC,IAAQM,QAAxB,SAAkCV,EAAMU,W,iCCApCC,EAAcC,YAAiB,IAiBtBC,cAAU,CAAEC,KAAM,2BAAlBD,EAfQ,SAACb,GACvB,OACC,uBAAMe,SAAUf,EAAMgB,aAAtB,UACC,8BACC,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACjBC,SAAU,CAACC,IAAeV,GAC1BW,YAAY,qBAAqBd,KAAK,qBAExC,8BACC,kDCuBWe,EAhCC,SAACvB,GAEhB,IAAIJ,EAAQI,EAAMwB,YAEdC,EAAkB7B,EAAM8B,QAC1BC,KAAI,SAAAtB,GAAM,OAAI,cAAC,EAAD,CAAYG,KAAMH,EAAOG,KAAsBN,GAAIG,EAAOH,IAAtBG,EAAOH,OAEvD0B,EAAmBhC,EAAMiC,SAC3BF,KAAI,SAAAjB,GAAO,OAAI,cAAC,EAAD,CAASA,QAASA,EAAQA,SAAcA,EAAQR,OAE5CN,EAAMkC,eAM3B,OAAK9B,EAAMH,OAGV,sBAAKM,UAAWC,IAAQsB,QAAxB,UACC,qBAAKvB,UAAWC,IAAQ2B,aAAxB,SACEN,IAEF,qBAAKtB,UAAWC,IAAQyB,SAAxB,SACC,8BAAMD,MAGP,cAAC,EAAD,CAAgBb,SAfE,SAACiB,GACpBhC,EAAMiC,YAAYD,EAAOF,sBAGA,cAAC,IAAD,CAAUvB,GAAI,YCJ1B2B,sBACdC,aAdqB,SAACvC,GACtB,MAAO,CACN4B,YAAa5B,EAAM4B,gBAGI,SAACY,GACzB,MAAO,CACNH,YAAa,SAACH,GACbM,EAASC,qBLNoB,SAACC,GAAe,IACzCC,EADwC,uKAG5C,OAAKC,KAAKxC,MAAMH,OACT,cAACyC,EAAD,eAAeE,KAAKxC,QADI,cAAC,IAAD,CAAUO,GAAI,eAHD,GACdkC,IAAMH,WAUtC,OADqCH,YAAQxC,EAARwC,CAAoCI,KKC3DL,CAGbX","file":"static/js/4.5b4a2d38.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__PYoKw\",\"dialogsItems\":\"Dialogs_dialogsItems__2QULa\",\"active\":\"Dialogs_active__2gKD-\",\"messages\":\"Dialogs_messages__uVDXt\",\"message\":\"Dialogs_message__1ycY6\"};","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n\tisAuth: state.auth.isAuth\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n\tclass RedirectComponent extends React.Component {\r\n\t\trender() {\r\n\t\t\tif (!this.props.isAuth) return <Redirect to={'/login'} />\r\n\t\t\treturn <Component {...this.props} />\r\n\t\t}\r\n\t}\r\n\r\n\t\r\n\t\r\n\tlet ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n\treturn ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport classes from './../Dialogs.module.css';\r\n\r\nconst DialogItem = (props) => {\r\n\tlet path = '/dialogs/' + props.id;\r\n\treturn (\r\n\t\t<div className={classes.dialog + ' ' + classes.active}>\r\n\t\t\t<NavLink to={path}>{props.name}</NavLink>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from './../Dialogs.module.css';\r\n\r\nconst Message = (props) => {\r\n\treturn (\r\n\t\t<div className={classes.message}>{props.message}</div>\r\n\t)\r\n}\r\n\r\nexport default Message;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport requiredField, { maxLengthCreator } from '../../../utils/Validators/Validators';\r\nimport { Textarea } from '../../Common/FormsControls/FormsControls';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\nconst AddMessageForm = (props) => {\r\n\treturn (\r\n\t\t<form onSubmit={props.handleSubmit}>\r\n\t\t\t<div>\r\n\t\t\t\t<Field component={Textarea}\r\n\t\t\t\t\tvalidate={[requiredField, maxLength50]}\r\n\t\t\t\t\tplaceholder='Enter your message' name='newMessageBody' />\r\n\t\t\t</div>\r\n\t\t\t<div>\r\n\t\t\t\t<button>Send</button>\r\n\t\t\t</div>\r\n\t\t</form>\r\n\t);\r\n};\r\n\r\nexport default reduxForm({ form: 'dialog-add-message-form' })(AddMessageForm);","import React from 'react';\r\nimport classes from './Dialogs.module.css';\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { Redirect } from 'react-router';\r\nimport AddMessageForm from './AddMessageForm/AddMessageForm';\r\n\r\nconst Dialogs = (props) => {\r\n\r\n\tlet state = props.dialogsPage;\r\n\r\n\tlet dialogsElements = state.dialogs\r\n\t\t.map(dialog => <DialogItem name={dialog.name} key={dialog.id} id={dialog.id} />);\r\n\r\n\tlet messagesElements = state.messages\r\n\t\t.map(message => <Message message={message.message} key={message.id} />);\r\n\r\n\tlet newMessageBody = state.newMessageBody;\r\n\r\n\tlet addNewMessage = (values) => {\r\n\t\tprops.sendMessage(values.newMessageBody);\r\n\t};\r\n\r\n\tif (!props.isAuth) return <Redirect to={'/login'} />;\r\n\r\n\treturn (\r\n\t\t<div className={classes.dialogs}>\r\n\t\t\t<div className={classes.dialogsItems}>\r\n\t\t\t\t{dialogsElements}\r\n\t\t\t</div>\r\n\t\t\t<div className={classes.messages}>\r\n\t\t\t\t<div>{messagesElements}</div>\r\n\r\n\t\t\t</div>\r\n\t\t\t<AddMessageForm onSubmit={addNewMessage} />\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Dialogs;","import { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { withAuthRedirect } from '../../Hoc/withAuthRedirect';\r\nimport { sendMessageCreator } from '../../Redux/dialogs-reducer'\r\nimport Dialogs from './Dialogs';\r\n\r\nlet mapStateToProps = (state) => {\r\n\treturn {\r\n\t\tdialogsPage: state.dialogsPage\r\n\t}\r\n}\r\nlet mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tsendMessage: (newMessageBody) => {\r\n\t\t\tdispatch(sendMessageCreator());\r\n\t\t}\r\n\t}\r\n}\r\n\r\nexport default compose(\r\n\tconnect(mapStateToProps, mapDispatchToProps),\r\n\twithAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}